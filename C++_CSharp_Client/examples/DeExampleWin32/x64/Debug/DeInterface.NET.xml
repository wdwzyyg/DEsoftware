<?xml version="1.0"?>
<doc>
    <assembly>
        "DeInterface.NET"
    </assembly>
    <members>
        <member name="M:DeInterface.DeInterfaceNET.GetImage(System.UInt16[]@)">
            <summary>
	Get an image from the camera and puts the data in the image array.
	</summary>
            <param name="image">Reference to an integer array to put the image data into.</param>
            <returns>True if able to place the image data into the array.</returns>
            <example>
                <code language="cs">
	DeInterfaceNET cameraServer = new DeInterfaceNET();

	// Connect to a server locally and set the read port to 48880 and the write port to 48879
	if (!cameraServer.connect("127.0.0.1", 48880, 48879))
	{
		return false; // we were unable to connect to the camera server
	}
	
	UInt16[] image;
	if(!cameraServer.GetImage(out image))
	{
		return false; // we were unable to get image dat.
	}

	// the data for the image is now located in the image array            
   </code>
            </example>
        </member>
        <member name="M:DeInterface.DeInterfaceNET.SetCameraName(System.String)">
            <summary>
	Set the camera's name.
	</summary>
            <param name="name">New camera name.</param>
            <returns>True if the camera name was set.</returns>
            <code language="cs">
   DeInterfaceNET cameraServer = new DeInterfaceNET();

	// Connect to a server locally and set the read port to 48880 and the write port to 48879
	if (!cameraServer.connect("127.0.0.1", 48880, 48879))
	{
		return false; // we were unable to connect to the camera server
	}
	
	if(!cameraServer.SetCameraName("New_Camera_Name"))
	{
		return false; // we were unable to set the camera name.
	}
	// the camera will now have the new name.
   </code>
        </member>
        <member name="M:DeInterface.DeInterfaceNET.GetProperty(System.String,System.String@)">
            <summary>
	Get the value for the property indicated.
	</summary>
            <param name="prop">Name of the property to get.</param>
            <param name="value">Reference to a string that will hold the value for the property.</param>
            <returns>True if the property was found.</returns>
            <example>
                <code language="cpp">
	
	DeInterfaceNet cameraServer;

	if (!cameraServer.connect("127.0.0.1", 48880, 48879)) {
		std::cerr &lt;&lt; "Unable to connect to camera server" &lt;&lt; std::endl;
		return -1;
	}

	std::vector&lt;std::string&gt; properties;
	if (!camearServer.GetPropertyNames(properties)) {
		std::cerr &lt;&lt; "Error getting properties" &lt;&lt; std::endl;
		return -1;
	}

	std::string value;
	if (!cameraServer.getProperty(properties.at(0), value)) {
		std::cerr &lt;&lt; "Error retrieving property value " &lt;&lt; std::endl;
		return -1;
	}
	// value now contains the value of the property.
	</code>
                <code language="cs">
	DeInterfaceNET cameraServer = new DeInterfaceNET();

	// Connect to a server locally and set the read port to 48880 and the write port to 48879
	if (!cameraServer.connect("127.0.0.1", 48880, 48879))
	{
		return false; // we were unable to connect to the camera server
	}

	List&lt;String&gt; properties = new List&lt;String&gt;();
	if(!cameraServer.GetPropertyNames(ref properties))
	{
		return false; // unable to get list of properties
	}
	
	String value = "";
	if(!cameraServer.GetProperty(properties[0], ref value))
	{
		return false; // unable to get list of properties
	}
	// value now contains the value of the property.
	
	
	</code>
            </example>
        </member>
        <member name="M:DeInterface.DeInterfaceNET.GetPropertyNames(System.Collections.Generic.List`1{System.String}@)">
            <summary>
	Gets the name of all the properties on the camera.
   </summary>
            <param name="props">A reference to a list of strings that will hold all the property names.</param>
            <returns>True if any properties were found.</returns>
            <example>
                <code language="cpp">
	
	DeInterfaceNet cameraServer;

	if (!cameraServer.connect("127.0.0.1", 48880, 48879)) {
		std::cerr &lt;&lt; "Unable to connect to camera server" &lt;&lt; std::endl;
		return -1;
	}
	// Query the list of available cameras.
	std::vector&lt;std::string&gt; properties;
	if (!cameraServer.GetPropertyNames(properties)) {
		std::cerr &lt;&lt; "Unable to get list of properties" &lt;&lt; std::endl;
		return -1;
	}
	// properties now has a list of the available properties.
	</code>
                <code language="cs">
	DeInterfaceNET cameraServer = new DeInterfaceNET();

	// Connect to a server locally and set the read port to 48880 and the write port to 48879
	if (!cameraServer.connect("127.0.0.1", 48880, 48879))
	{
		return false; // we were unable to connect to the camera server
	}

	// Get the list of camera names.
	List&lt;String&gt; properties = new List&lt;String&gt;();
	if(!cameraServer.GetPropertyNames(ref properties))
	{
		return false; // unable to get list of properties
	}
	// properties now has a list of the available properties.	
	</code>
            </example>
        </member>
        <member name="M:DeInterface.DeInterfaceNET.GetCameraNames(System.Collections.Generic.List`1{System.String}@)">
            <summary>
	Gets a list of camera names that can be connected to.
   </summary>
            <param name="cameras">A reference to a string list that will hold all the camera names.</param>
            <returns>Always returns true once all camera names have been added to the list. </returns>
            <example>
                <code language="cpp">
	
	DeInterfaceNet cameraServer;

	if (!cameraServer.connect("127.0.0.1", 48880, 48879)) {
		std::cerr &lt;&lt; "Unable to connect to camera server" &lt;&lt; std::endl;
		return -1;
	}
	// Query the list of available cameras.
	std::vector&lt;std::string&gt; cameras;
	if (!cameraServer.GetCameraNames(cameras)) {
		std::cerr &lt;&lt; "Unable to get list of available cameras" &lt;&lt; std::endl;
		return -1;
	}
	// cameras now has a list of the available cameras.
	</code>
                <code language="cs">
	DeInterfaceNET cameraServer = new DeInterfaceNET();

	// Connect to a server locally and set the read port to 48880 and the write port to 48879
	if (!cameraServer.connect("127.0.0.1", 48880, 48879))
	{
		return false; // we were unable to connect to the camera server
	}

	// Get the list of camera names.
	List&lt;String&gt; cameras = new List&lt;String&gt;();
	if(!cameraServer.GetCameraNames(ref cameras))
	{
		return false; // unable to get list of available cameras
	}
	// cameras now has the list of camera names
	</code>
            </example>
        </member>
        <member name="M:DeInterface.DeInterfaceNET.close">
            <summary>
	Closes the connection to the server.
	</summary>
            <returns>True if the connection to the camera was closed.</returns>
            <example>
                <code language="cpp">
	DeInterfaceNET cameraServer;

	// Connect to a server locally and set the read port to 48880 and the write port to 48879
	if (!cameraServer.connect("127.0.0.1", 48880, 48879)) {
		std::cerr &lt;&lt; "Unable to connect to camera server" &lt;&lt; std::endl;
		return -1;
	}
	
	// Close the connection to the camera server.
	cameraServer.close();

	</code>
                <code language="cs">
	DeInterfaceNET cameraServer = new DeInterfaceNET();

	// Connect to a server locally and set the read port to 48880 and the write port to 48879
	if (!cameraServer.connect("127.0.0.1", 48880, 48879))
	{
		return false; // we were unable to connect to the camera server
	}

	// Close the connection to the camera server.
	cameraServer.close();
	</code>
            </example>
        </member>
        <member name="M:DeInterface.DeInterfaceNET.connect(System.String,System.Int32,System.Int32)">
            <summary>
	The connect function will connect to a camera server at the indicated ip address and use
	the read and write ports to communicate with it.
   </summary>
            <param name="ip">The ip address of the camera to connect to.</param>
            <param name="rPort">The port to read data from.</param>
            <param name="wPort">The port to write data to.</param>
            <returns>True if the connection was made to the server.</returns>
            <example>
                <code language="cpp">
	DeInterfaceNET cameraServer;

	// Connect to a server locally and set the read port to 48880 and the write port to 48879
	if (!cameraServer.connect("127.0.0.1", 48880, 48879)) {
		std::cerr &lt;&lt; "Unable to connect to camera server" &lt;&lt; std::endl;
		return -1;
	}
	// We are now connected to the camera server.
	</code>
                <code language="cs">
	DeInterfaceNET cameraServer = new DeInterfaceNET();

	// Connect to a server locally and set the read port to 48880 and the write port to 48879
	if (!cameraServer.connect("127.0.0.1", 48880, 48879))
	{
		return false; // we were unable to connect to the camera server
	}
	// We are now connected to the camera server.
	</code>
            </example>
        </member>
        <member name="T:DeInterface.DeInterfaceNET">
            <summary>
This class is used to connect to a camera, get and set it's properties, and get and set it's name.
</summary>
        </member>
    </members>
</doc>